// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	product "olshop/product"

	mock "github.com/stretchr/testify/mock"
)

// ServiceProductInt is an autogenerated mock type for the ServiceProductInt type
type ServiceProductInt struct {
	mock.Mock
}

// AddShoppingCart provides a mock function with given fields: customerid
func (_m *ServiceProductInt) AddShoppingCart(customerid int) error {
	ret := _m.Called(customerid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(customerid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetListShopCart provides a mock function with given fields: cartid, customerid
func (_m *ServiceProductInt) GetListShopCart(cartid int, customerid int) ([]product.Product, error) {
	ret := _m.Called(cartid, customerid)

	var r0 []product.Product
	if rf, ok := ret.Get(0).(func(int, int) []product.Product); ok {
		r0 = rf(cartid, customerid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(cartid, customerid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductCategory provides a mock function with given fields: name_category
func (_m *ServiceProductInt) GetProductCategory(name_category string) ([]product.Product, error) {
	ret := _m.Called(name_category)

	var r0 []product.Product
	if rf, ok := ret.Get(0).(func(string) []product.Product); ok {
		r0 = rf(name_category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name_category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProductByCartID provides a mock function with given fields: productid, cartid
func (_m *ServiceProductInt) InsertProductByCartID(productid int, cartid int) (product.Product, error) {
	ret := _m.Called(productid, cartid)

	var r0 product.Product
	if rf, ok := ret.Get(0).(func(int, int) product.Product); ok {
		r0 = rf(productid, cartid)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(productid, cartid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
