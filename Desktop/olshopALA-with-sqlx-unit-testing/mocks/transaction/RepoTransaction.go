// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	transaction "olshop/transaction"

	mock "github.com/stretchr/testify/mock"
)

// RepoTransaction is an autogenerated mock type for the RepoTransaction type
type RepoTransaction struct {
	mock.Mock
}

// GetDetailTransaction provides a mock function with given fields: id
func (_m *RepoTransaction) GetDetailTransaction(id int) (transaction.Transactions, error) {
	ret := _m.Called(id)

	var r0 transaction.Transactions
	if rf, ok := ret.Get(0).(func(int) transaction.Transactions); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transaction.Transactions)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastTransaction provides a mock function with given fields:
func (_m *RepoTransaction) GetLastTransaction() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InserTransaction provides a mock function with given fields: t
func (_m *RepoTransaction) InserTransaction(t transaction.Transactions) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Transactions) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SumPriceBoughtById provides a mock function with given fields: id
func (_m *RepoTransaction) SumPriceBoughtById(id int) int {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
